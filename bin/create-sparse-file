#!perl

# Note: This script is a CLI interface to Riap function /App/CreateSparseFile/create_sparse_file
# and generated automatically using Dist::Zilla::Plugin::Rinci::ScriptFromFunc version 0.03

our $DATE = '2014-12-05'; # DATE
our $VERSION = '0.02'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any -prefer_lite=>1;

Perinci::CmdLine::Any->new(
    url => "/App/CreateSparseFile/create_sparse_file",
)->run;

# ABSTRACT: Create sparse file
# PODNAME: create-sparse-file

__END__

=pod

=encoding UTF-8

=head1 NAME

create-sparse-file - Create sparse file

=head1 VERSION

This document describes version 0.02 of create-sparse-file (from Perl distribution App-CreateSparseFile), released on 2014-12-05.

=head1 SYNOPSIS

Usage:

 % create-sparse-file [options] <name> <size>

Examples:

Create a sparse file called file.bin with size of 30GB:

 % create-sparse-file file.bin 30G

=head1 DESCRIPTION

Sparse file is a file with a predefined size (sometimes large) but does not yet
allocate all its (blank) data on disk. Sparse file is a feature of filesystem.

I usually create sparse file when I want to create a large disk image but do not
want to preallocate its data yet. Creating a sparse file should be virtually
instantaneous.

=head1 OPTIONS

C<*> marks required options.

=over

=item B<--config-path>=I<s>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--format>=I<s>

Set output format.

=item B<--help>, B<-h>, B<-?>

Show help message.

=item B<--json>

Set output format to json.

=item B<--naked-res>

When outputing as JSON, strip result envelope.

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing:

    [1,2,3]

In this case, you can use `--naked-res`.


=item B<--name>=I<s>*

=item B<--no-config>

Do not use any configuration file.

=item B<--no-interactive>

If set to false then will not prompt interactively and usually will proceed
(unless for dangerous stuffs, in which case will bail immediately.


=item B<--override>

Whether to override existing file.

If se to true then will override existing file without warning. The default is
to prompt, or bail (if not interactive).


=item B<--size>=I<s>*, B<-s>

Size (e.g. 10K, 22.5M).

=item B<--version>, B<-v>

Show program version.

=back

=head1 FILES

B</etc/create-sparse-file.conf>

B<~/create-sparse-file.conf>

=head1 COMPLETION

This script has shell tab completion capability with support for several shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C create-sparse-file create-sparse-file

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

You can also install L<App::BashCompletionProg> which makes it easy to add completion for Perinci::CmdLine-based scripts. After you install the module and put C<. ~/.bash-complete-prog> (or C<. /etc/bash-complete-prog>), you can just run C<bash-completion-prog> and the C<complete> command will be added to your C<~/.bash-completion-prog>. Your next shell session will then recognize tab completion for the command.

=head2 fish

To activate fish completion for this script, execute:

 begin; set -lx COMP_SHELL fish; set -lx COMP_MODE gen_command; create-sparse-file; end > $HOME/.config/fish/completions/create-sparse-file.fish

Or if you want to install globally, you can instead write the generated script to C</etc/fish/completions/create-sparse-file.fish> or C</usr/share/fish/completions/create-sparse-file.fish>. The exact path might be different on your system. Please check your C<fish_complete_path> variable.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete create-sparse-file 'p/*/`create-sparse-file`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

=head2 zsh

To activate zsh completion for this script, put:

 _create_sparse_file() { read -l; local cl="$REPLY"; read -ln; local cp="$REPLY"; reply=(`COMP_SHELL=zsh COMP_LINE="$cl" COMP_POINT="$cp" create-sparse-file`) }

 compctl -K _create_sparse_file create-sparse-file

in your zsh startup (e.g. C<~/.zshrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-CreateSparseFile>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-CreateSparseFile>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-CreateSparseFile>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
